{"version":3,"file":"chrome-apps-serialport.min.js","sources":["../src/chrome-apps-serialport.js"],"sourcesContent":["\"use strict\";\n\nconst EE = require(\"events\").EventEmitter;\nconst util = require(\"util\");\n\nif (process && process.versions.nw && parseFloat(process.versions.nw) >= 0.13) {\n  require(\"nwjs-j5-fix\").fix(); // Fix issue with streams in NW.js\n}\n\nconst DATABITS = [7, 8];\nconst STOPBITS = [1, 2];\nconst PARITY = [\"none\", \"even\", \"mark\", \"odd\", \"space\"];\nconst FLOWCONTROLS = [\"RTSCTS\"];\n\nconst _options = {\n  baudrate: 9600,\n  parity: \"none\",\n  rtscts: false,\n  databits: 8,\n  stopbits: 1,\n  buffersize: 256\n};\n\n// This holds data that couldn't be sent (typically when trying to send while a send operation is\n// already ongoing)\nlet _bufferArray = [];\n\nfunction convertOptions(options){\n  switch (options.dataBits) {\n    case 7:\n      options.dataBits = \"seven\";\n      break;\n    case 8:\n      options.dataBits = \"eight\";\n      break;\n  }\n\n  switch (options.stopBits) {\n    case 1:\n      options.stopBits = \"one\";\n      break;\n    case 2:\n      options.stopBits = \"two\";\n      break;\n  }\n\n  switch (options.parity) {\n    case \"none\":\n      options.parity = \"no\";\n      break;\n  }\n\n  return options;\n}\n\nfunction SerialPort(path, options, callback) {\n\n  EE.call(this);\n\n  let self = this;\n\n  this.sending = false;\n\n  let args = Array.prototype.slice.call(arguments);\n  callback = args.pop();\n  if (typeof(callback) !== \"function\") {\n    callback = null;\n  }\n\n  options = (typeof options !== \"function\") && options || {};\n\n  if (options.autoOpen === undefined || options.autoOpen === null) {\n    options.autoOpen = true;\n  }\n\n  callback = callback || function (err) {\n    if (err) {\n      self.emit(\"error\", err);\n    }\n  };\n\n  let err;\n\n  options.baudRate = options.baudRate || options.baudrate || _options.baudrate;\n\n  options.dataBits = options.dataBits || options.databits || _options.databits;\n  if (DATABITS.indexOf(options.dataBits) === -1) {\n    err = new Error(\"Invalid \\\"databits\\\": \" + options.dataBits);\n    callback(err);\n    return;\n  }\n\n  options.stopBits = options.stopBits || options.stopbits || _options.stopbits;\n  if (STOPBITS.indexOf(options.stopBits) === -1) {\n    err = new Error(\"Invalid \\\"stopbits\\\": \" + options.stopbits);\n    callback(err);\n    return;\n  }\n\n  options.parity = options.parity || _options.parity;\n  if (PARITY.indexOf(options.parity) === -1) {\n    err = new Error(\"Invalid \\\"parity\\\": \" + options.parity);\n    callback(err);\n    return;\n  }\n\n  if (!path) {\n    err = new Error(\"Invalid port specified: \" + path);\n    callback(err);\n    return;\n  }\n\n  options.rtscts = _options.rtscts;\n\n  if (options.flowControl || options.flowcontrol) {\n    let fc = options.flowControl || options.flowcontrol;\n\n    if (typeof fc === \"boolean\") {\n      options.rtscts = true;\n    } else {\n      let clean = fc.every(function (flowControl) {\n        let fcup = flowControl.toUpperCase();\n        let idx = FLOWCONTROLS.indexOf(fcup);\n        if (idx < 0) {\n          let err = new Error(\"Invalid \\\"flowControl\\\": \" + fcup + \". Valid options: \" +\n            FLOWCONTROLS.join(\"\"));\n          callback(err);\n          return false;\n        } else {\n\n          // \"XON\", \"XOFF\", \"XANY\", \"DTRDTS\", \"RTSCTS\"\n          switch (idx) {\n            case 0: options.rtscts = true; break;\n          }\n          return true;\n        }\n      });\n      if(!clean){\n        return;\n      }\n    }\n  }\n\n  options.bufferSize = options.bufferSize || options.buffersize || _options.buffersize;\n\n  // defaults to chrome.serial if no options.serial passed\n  // inlined instead of on _options to allow mocking global chrome.serial for optional options test\n  options.serial = options.serial || (typeof chrome !== \"undefined\" && chrome.serial);\n\n  if (!options.serial) {\n    throw new Error(\"No access to serial ports. Try loading as a Chrome Application.\");\n  }\n\n  this.options = convertOptions(options);\n\n  this.options.serial.onReceiveError.addListener(function(info){\n\n    switch (info.error) {\n\n      case \"disconnected\":\n      case \"device_lost\":\n      case \"system_error\":\n        err = new Error(\"Disconnected\");\n        // send notification of disconnect\n        if (self.options.disconnectedCallback) {\n          self.options.disconnectedCallback(err);\n        } else {\n          self.emit(\"disconnect\", err);\n        }\n        if(self.connectionId >= 0){\n          self.close();\n        }\n        break;\n      case \"timeout\":\n        break;\n    }\n\n  });\n\n  this.path = path;\n  this.isOpen = false;\n  this.baudRate = this.options.baudRate;\n\n  if (options.autoOpen) {\n    process.nextTick(function () {\n      self.open(callback);\n    });\n  }\n\n}\n\nutil.inherits(SerialPort, EE);\n\nSerialPort.prototype.connectionId = -1;\n\nSerialPort.prototype.open = function (callback) {\n\n  let options = {\n    bitrate: parseInt(this.options.baudRate, 10),\n    dataBits: this.options.dataBits,\n    parityBit: this.options.parity,\n    stopBits: this.options.stopBits,\n    ctsFlowControl: this.options.rtscts\n  };\n\n  this.options.serial.connect(this.path, options, this.proxy(\"onOpen\", callback));\n\n};\n\nSerialPort.prototype.onOpen = function (callback, openInfo) {\n  if(chrome.runtime.lastError){\n    if(typeof callback === \"function\"){\n      callback(chrome.runtime.lastError);\n    }else{\n      this.emit(\"error\", chrome.runtime.lastError);\n    }\n    return;\n  }\n\n  this.connectionId = openInfo.connectionId;\n\n  if (this.connectionId === -1) {\n    this.emit(\"error\", new Error(\"Could not open port.\"));\n    return;\n  }\n\n  this.isOpen = true;\n  this.emit(\"open\", openInfo);\n\n  this._reader = this.proxy(\"onRead\");\n\n  this.options.serial.onReceive.addListener(this._reader);\n\n  if(typeof callback === \"function\"){\n    callback(chrome.runtime.lastError, openInfo);\n  }\n};\n\nSerialPort.prototype.onRead = function (readInfo) {\n  if (readInfo && this.connectionId === readInfo.connectionId) {\n\n    if (this.options.dataCallback) {\n      this.options.dataCallback(toBuffer(readInfo.data));\n    } else {\n      this.emit(\"data\", toBuffer(readInfo.data));\n    }\n\n  }\n};\n\nSerialPort.prototype.write = function (buffer, encoding = \"utf8\", callback = () => {}) {\n\n  // This is for backwards-compatibility (when \"encoding\" is omitted)\n  if (typeof encoding !== \"string\" && !(encoding instanceof String)) {\n    callback = encoding;\n    encoding = \"utf8\";\n  }\n\n  if (encoding !== \"utf8\") console.warn(\"Only utf8 encoding is supported for strings.\");\n\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if (typeof callback === \"function\") callback(err);\n    this.emit(\"error\", err);\n    return;\n  }\n\n  if (typeof buffer === \"string\") buffer = str2ab(buffer);\n\n  // chrome.serial needs an ArrayBuffer not a Buffer\n  if (!(buffer instanceof ArrayBuffer)) buffer = buffer2ArrayBuffer(buffer);\n  callback();\n  this._processBuffer(buffer);\n\n};\n\nSerialPort.prototype._processBuffer = function (buffer) {\n\n  if (buffer) _bufferArray.push(buffer);\n\n  if (this.sending) return;\n  this.sending = true;\n\n  this.options.serial.send(this.connectionId, _bufferArray[0], function(info) {\n\n    if (info.error === \"pending\") {\n      console.warn(\"You cannot send serial data while another send is pending. Retrying.\");\n    } else if (info.error) {\n      console.warn(\"Sending serial data failed. Error: \" + info.error);\n      _bufferArray = [];\n    } else {\n      _bufferArray.shift();\n    }\n\n    this.sending = false;\n    if (_bufferArray.length > 0) setImmediate(this._processBuffer.bind(this));\n\n  }.bind(this));\n\n};\n\nSerialPort.prototype.close = function (callback) {\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if(typeof callback === \"function\"){\n      callback(err);\n    }else{\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  this.options.serial.disconnect(this.connectionId, this.proxy(\"onClose\", callback));\n};\n\nSerialPort.prototype.onClose = function (callback, result) {\n  this.connectionId = -1;\n  this.isOpen = false;\n  this.emit(\"close\");\n\n  this.removeAllListeners();\n  if(this._reader){\n    this.options.serial.onReceive.removeListener(this._reader);\n    this._reader = null;\n  }\n\n  if (typeof callback === \"function\") {\n    callback(chrome.runtime.lastError, result);\n  }\n};\n\nSerialPort.prototype.flush = function (callback) {\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if(typeof callback === \"function\"){\n      callback(err);\n    }else{\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  let self = this;\n\n  this.options.serial.flush(this.connectionId, function(result) {\n    if (chrome.runtime.lastError) {\n      if (typeof callback === \"function\") {\n        callback(chrome.runtime.lastError, result);\n      } else {\n        self.emit(\"error\", chrome.runtime.lastError);\n      }\n    } else {\n      callback(null, result);\n    }\n  });\n};\n\nSerialPort.prototype.drain = function (callback) {\n\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if (typeof callback === \"function\") {\n      callback(err);\n    } else {\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  if (typeof callback === \"function\") {\n    callback();\n  }\n\n};\n\nSerialPort.prototype.pause = function (callback) {\n\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if (typeof callback === \"function\") {\n      callback(err);\n    } else {\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  this.options.serial.setPaused(this.connectionId, true, callback);\n\n};\n\nSerialPort.prototype.resume = function (callback) {\n\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if (typeof callback === \"function\") {\n      callback(err);\n    } else {\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  this.options.serial.setPaused(this.connectionId, false, callback);\n\n};\n\nSerialPort.prototype.update = function (options = {}, callback = () => {}) {\n\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if (typeof callback === \"function\") {\n      callback(err);\n    } else {\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  this.options.serial.update(this.connectionId, {bitrate: options.baudRate}, callback);\n\n};\n\nSerialPort.prototype.proxy = function () {\n  let self = this;\n  let proxyArgs = [];\n\n  //arguments isnt actually an array.\n  for (let i = 0; i < arguments.length; i++) {\n    proxyArgs[i] = arguments[i];\n  }\n\n  let functionName = proxyArgs.splice(0, 1)[0];\n\n  return function() {\n    let funcArgs = [];\n    for (let i = 0; i < arguments.length; i++) {\n      funcArgs[i] = arguments[i];\n    }\n    let allArgs = proxyArgs.concat(funcArgs);\n\n    self[functionName].apply(self, allArgs);\n  };\n\n};\n\nSerialPort.prototype.set = function (options, callback) {\n  this.options.serial.setControlSignals(this.connectionId, options, function(result){\n    callback(chrome.runtime.lastError, result);\n  });\n};\n\nSerialPort.prototype.get = function (options, callback) {\n  this.options.serial.getControlSignals(this.connectionId, function(signals){\n    callback(chrome.runtime.lastError, signals);\n  });\n};\n\nSerialPort.list = async function(callback) {\n\n  if (typeof chrome != \"undefined\" && chrome.serial) {\n\n    return new Promise(resolve => {\n\n      chrome.serial.getDevices(function(ports) {\n\n        let portObjects = new Array(ports.length);\n\n        for (let i = 0; i < ports.length; i++) {\n          portObjects[i] = {\n            comName: ports[i].path, // backwards-compatibility with older versions of serialport\n            path: ports[i].path,\n            manufacturer: ports[i].displayName,\n            serialNumber: \"\",\n            pnpId: \"\",\n            locationId:\"\",\n            vendorId: \"0x\" + (ports[i].vendorId||0).toString(16),\n            productId: \"0x\" + (ports[i].productId||0).toString(16)\n          };\n        }\n\n        if (typeof callback === \"function\") callback(chrome.runtime.lastError, portObjects);\n        resolve(portObjects);\n\n      });\n\n    });\n\n  } else {\n    let error = new Error(\"No access to serial ports. Try loading as a Chrome Application.\");\n    callback(error, null);\n    return Promise.reject(error);\n  }\n\n};\n\n// Convert string to ArrayBuffer\nfunction str2ab(str) {\n  let buf = new ArrayBuffer(str.length);\n  let bufView = new Uint8Array(buf);\n  for (let i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\nfunction buffer2ArrayBuffer(buf) {\n  return new Uint8Array(buf).buffer;\n}\n\nfunction toBuffer(ab) {\n  let buffer = new Buffer(ab.byteLength);\n  let view = new Uint8Array(ab);\n  for (let i = 0; i < buffer.length; ++i) {\n    buffer[i] = view[i];\n  }\n  return buffer;\n}\n\nmodule.exports = {\n  SerialPort: SerialPort,\n  list: SerialPort.list, // this is for backwards-compatibility\n  buffer2ArrayBuffer: buffer2ArrayBuffer,\n  used: [] //Populate this somewhere!!\n};\n"],"names":["EE","require","EventEmitter","util","process","versions","nw","parseFloat","fix","DATABITS","STOPBITS","PARITY","FLOWCONTROLS","_options","_bufferArray","convertOptions","options","dataBits","stopBits","parity","SerialPort","path","callback","call","this","self","sending","err","args","Array","prototype","slice","arguments","pop","undefined","autoOpen","emit","baudRate","baudrate","databits","indexOf","Error","stopbits","rtscts","flowControl","flowcontrol","fc","every","fcup","toUpperCase","idx","join","bufferSize","buffersize","serial","chrome","onReceiveError","addListener","info","error","disconnectedCallback","connectionId","close","isOpen","nextTick","open","buffer2ArrayBuffer","buf","Uint8Array","buffer","toBuffer","ab","Buffer","byteLength","view","i","length","inherits","bitrate","parseInt","parityBit","ctsFlowControl","connect","proxy","onOpen","openInfo","runtime","lastError","_reader","onReceive","onRead","readInfo","dataCallback","data","write","encoding","String","console","warn","str","ArrayBuffer","bufView","charCodeAt","str2ab","_processBuffer","push","send","shift","setImmediate","bind","disconnect","onClose","result","removeAllListeners","removeListener","flush","drain","pause","setPaused","resume","update","proxyArgs","functionName","splice","funcArgs","allArgs","concat","apply","set","setControlSignals","get","getControlSignals","signals","list","async","Promise","resolve","getDevices","ports","portObjects","comName","manufacturer","displayName","serialNumber","pnpId","locationId","vendorId","toString","productId","reject","module","exports","used"],"mappings":"AAEA,MAAMA,EAAKC,QAAQ,UAAUC,aACvBC,EAAOF,QAAQ,QAEjBG,SAAWA,QAAQC,SAASC,IAAMC,WAAWH,QAAQC,SAASC,KAAO,KACvEL,QAAQ,eAAeO,MAGzB,MAAMC,EAAW,CAAC,EAAG,GACfC,EAAW,CAAC,EAAG,GACfC,EAAS,CAAC,OAAQ,OAAQ,OAAQ,MAAO,SACzCC,EAAe,CAAC,UAEhBC,EACM,KADNA,EAEI,OAFJA,GAGI,EAHJA,EAIM,EAJNA,EAKM,EALNA,EAMQ,IAKd,IAAIC,EAAe,GAEnB,SAASC,EAAeC,GACtB,OAAQA,EAAQC,UACd,KAAK,EACHD,EAAQC,SAAW,QACnB,MACF,KAAK,EACHD,EAAQC,SAAW,QAIvB,OAAQD,EAAQE,UACd,KAAK,EACHF,EAAQE,SAAW,MACnB,MACF,KAAK,EACHF,EAAQE,SAAW,MAIvB,OAAQF,EAAQG,QACd,IAAK,OACHH,EAAQG,OAAS,KAIrB,OAAOH,EAGT,SAASI,EAAWC,EAAML,EAASM,GAEjCtB,EAAGuB,KAAKC,MAER,IAAIC,EAAOD,KAEXA,KAAKE,SAAU,EAEf,IAkBIC,EAlBAC,EAAOC,MAAMC,UAAUC,MAAMR,KAAKS,WAuBtC,GArByB,mBADzBV,EAAWM,EAAKK,SAEdX,EAAW,WAKYY,KAFzBlB,EAA8B,mBAAZA,GAA2BA,GAAW,IAE5CmB,UAA+C,OAArBnB,EAAQmB,WAC5CnB,EAAQmB,UAAW,GAGrBb,EAAWA,GAAY,SAAUK,GAC3BA,GACFF,EAAKW,KAAK,QAAST,IAMvBX,EAAQqB,SAAWrB,EAAQqB,UAAYrB,EAAQsB,UAAYzB,EAE3DG,EAAQC,SAAWD,EAAQC,UAAYD,EAAQuB,UAAY1B,GACf,IAAxCJ,EAAS+B,QAAQxB,EAAQC,UAG3B,OAFAU,EAAM,IAAIc,MAAM,uBAA2BzB,EAAQC,eACnDK,EAASK,GAKX,GADAX,EAAQE,SAAWF,EAAQE,UAAYF,EAAQ0B,UAAY7B,GACf,IAAxCH,EAAS8B,QAAQxB,EAAQE,UAG3B,OAFAS,EAAM,IAAIc,MAAM,uBAA2BzB,EAAQ0B,eACnDpB,EAASK,GAKX,GADAX,EAAQG,OAASH,EAAQG,QAAUN,GACK,IAApCF,EAAO6B,QAAQxB,EAAQG,QAGzB,OAFAQ,EAAM,IAAIc,MAAM,qBAAyBzB,EAAQG,aACjDG,EAASK,GAIX,IAAKN,EAGH,OAFAM,EAAM,IAAIc,MAAM,2BAA6BpB,QAC7CC,EAASK,GAMX,GAFAX,EAAQ2B,OAAS9B,EAEbG,EAAQ4B,aAAe5B,EAAQ6B,YAAa,CAC9C,IAAIC,EAAK9B,EAAQ4B,aAAe5B,EAAQ6B,YAExC,GAAkB,kBAAPC,EACT9B,EAAQ2B,QAAS,MACZ,CAkBL,IAjBYG,EAAGC,OAAM,SAAUH,GAC7B,IAAII,EAAOJ,EAAYK,cACnBC,EAAMtC,EAAa4B,QAAQQ,GAC/B,GAAIE,EAAM,EAAG,CACX,IAAIvB,EAAM,IAAIc,MAAM,0BAA8BO,EAAO,oBACvDpC,EAAauC,KAAK,KAEpB,OADA7B,EAASK,IACF,EAIP,OAAQuB,GACN,KAAK,EAAGlC,EAAQ2B,QAAS,EAE3B,OAAO,KAIT,QAWN,GANA3B,EAAQoC,WAAapC,EAAQoC,YAAcpC,EAAQqC,YAAcxC,EAIjEG,EAAQsC,OAAStC,EAAQsC,QAA6B,oBAAXC,QAA0BA,OAAOD,QAEvEtC,EAAQsC,OACX,MAAM,IAAIb,MAAM,mEAGlBjB,KAAKR,QAAUD,EAAeC,GAE9BQ,KAAKR,QAAQsC,OAAOE,eAAeC,aAAY,SAASC,GAEtD,OAAQA,EAAKC,OAEX,IAAK,eACL,IAAK,cACL,IAAK,eACHhC,EAAM,IAAIc,MAAM,gBAEZhB,EAAKT,QAAQ4C,qBACfnC,EAAKT,QAAQ4C,qBAAqBjC,GAElCF,EAAKW,KAAK,aAAcT,GAEvBF,EAAKoC,cAAgB,GACtBpC,EAAKqC,YASbtC,KAAKH,KAAOA,EACZG,KAAKuC,QAAS,EACdvC,KAAKa,SAAWb,KAAKR,QAAQqB,SAEzBrB,EAAQmB,UACV/B,QAAQ4D,UAAS,WACfvC,EAAKwC,KAAK3C,MAwUhB,SAAS4C,EAAmBC,GAC1B,OAAO,IAAIC,WAAWD,GAAKE,OAG7B,SAASC,EAASC,GAChB,IAAIF,EAAS,IAAIG,OAAOD,EAAGE,YACvBC,EAAO,IAAIN,WAAWG,GAC1B,IAAK,IAAII,EAAI,EAAGA,EAAIN,EAAOO,SAAUD,EACnCN,EAAOM,GAAKD,EAAKC,GAEnB,OAAON,EA5UTlE,EAAK0E,SAASzD,EAAYpB,GAE1BoB,EAAWU,UAAU+B,cAAgB,EAErCzC,EAAWU,UAAUmC,KAAO,SAAU3C,GAEpC,IAAIN,EAAU,CACZ8D,QAASC,SAASvD,KAAKR,QAAQqB,SAAU,IACzCpB,SAAUO,KAAKR,QAAQC,SACvB+D,UAAWxD,KAAKR,QAAQG,OACxBD,SAAUM,KAAKR,QAAQE,SACvB+D,eAAgBzD,KAAKR,QAAQ2B,QAG/BnB,KAAKR,QAAQsC,OAAO4B,QAAQ1D,KAAKH,KAAML,EAASQ,KAAK2D,MAAM,SAAU7D,KAIvEF,EAAWU,UAAUsD,OAAS,SAAU9D,EAAU+D,GAC7C9B,OAAO+B,QAAQC,UACO,mBAAbjE,EACRA,EAASiC,OAAO+B,QAAQC,WAExB/D,KAAKY,KAAK,QAASmB,OAAO+B,QAAQC,YAKtC/D,KAAKqC,aAAewB,EAASxB,cAEF,IAAvBrC,KAAKqC,cAKTrC,KAAKuC,QAAS,EACdvC,KAAKY,KAAK,OAAQiD,GAElB7D,KAAKgE,QAAUhE,KAAK2D,MAAM,UAE1B3D,KAAKR,QAAQsC,OAAOmC,UAAUhC,YAAYjC,KAAKgE,SAExB,mBAAblE,GACRA,EAASiC,OAAO+B,QAAQC,UAAWF,IAZnC7D,KAAKY,KAAK,QAAS,IAAIK,MAAM,2BAgBjCrB,EAAWU,UAAU4D,OAAS,SAAUC,GAClCA,GAAYnE,KAAKqC,eAAiB8B,EAAS9B,eAEzCrC,KAAKR,QAAQ4E,aACfpE,KAAKR,QAAQ4E,aAAatB,EAASqB,EAASE,OAE5CrE,KAAKY,KAAK,OAAQkC,EAASqB,EAASE,SAM1CzE,EAAWU,UAAUgE,MAAQ,SAAUzB,EAAQ0B,EAAW,OAAQzE,EAAW,UAU3E,GAPwB,iBAAbyE,GAA2BA,aAAoBC,SACxD1E,EAAWyE,EACXA,EAAW,QAGI,SAAbA,GAAqBE,QAAQC,KAAK,gDAElC1E,KAAKqC,aAAe,EAAG,CACzBrC,KAAKuC,QAAS,EACd,IAAIpC,EAAM,IAAIc,MAAM,wBAGpB,MAFwB,mBAAbnB,GAAyBA,EAASK,QAC7CH,KAAKY,KAAK,QAAST,GAIC,iBAAX0C,IAAqBA,EA4OlC,SAAgB8B,GACd,IAAIhC,EAAM,IAAIiC,YAAYD,EAAIvB,QAC1ByB,EAAU,IAAIjC,WAAWD,GAC7B,IAAK,IAAIQ,EAAI,EAAGA,EAAIwB,EAAIvB,OAAQD,IAC9B0B,EAAQ1B,GAAKwB,EAAIG,WAAW3B,GAE9B,OAAOR,EAlPkCoC,CAAOlC,IAG1CA,aAAkB+B,cAAc/B,EAASH,EAAmBG,IAClE/C,IACAE,KAAKgF,eAAenC,IAItBjD,EAAWU,UAAU0E,eAAiB,SAAUnC,GAE1CA,GAAQvD,EAAa2F,KAAKpC,GAE1B7C,KAAKE,UACTF,KAAKE,SAAU,EAEfF,KAAKR,QAAQsC,OAAOoD,KAAKlF,KAAKqC,aAAc/C,EAAa,GAAI,SAAS4C,GAEjD,YAAfA,EAAKC,MACPsC,QAAQC,KAAK,wEACJxC,EAAKC,OACdsC,QAAQC,KAAK,sCAAwCxC,EAAKC,OAC1D7C,EAAe,IAEfA,EAAa6F,QAGfnF,KAAKE,SAAU,EACXZ,EAAa8D,OAAS,GAAGgC,aAAapF,KAAKgF,eAAeK,KAAKrF,QAEnEqF,KAAKrF,SAITJ,EAAWU,UAAUgC,MAAQ,SAAUxC,GACrC,GAAIE,KAAKqC,aAAe,EAAxB,CACErC,KAAKuC,QAAS,EACd,IAAIpC,EAAM,IAAIc,MAAM,wBACG,mBAAbnB,EACRA,EAASK,GAETH,KAAKY,KAAK,QAAST,QAKvBH,KAAKR,QAAQsC,OAAOwD,WAAWtF,KAAKqC,aAAcrC,KAAK2D,MAAM,UAAW7D,KAG1EF,EAAWU,UAAUiF,QAAU,SAAUzF,EAAU0F,GACjDxF,KAAKqC,cAAgB,EACrBrC,KAAKuC,QAAS,EACdvC,KAAKY,KAAK,SAEVZ,KAAKyF,qBACFzF,KAAKgE,UACNhE,KAAKR,QAAQsC,OAAOmC,UAAUyB,eAAe1F,KAAKgE,SAClDhE,KAAKgE,QAAU,MAGO,mBAAblE,GACTA,EAASiC,OAAO+B,QAAQC,UAAWyB,IAIvC5F,EAAWU,UAAUqF,MAAQ,SAAU7F,GACrC,GAAIE,KAAKqC,aAAe,EAAG,CACzBrC,KAAKuC,QAAS,EACd,IAAIpC,EAAM,IAAIc,MAAM,wBAMpB,YALuB,mBAAbnB,EACRA,EAASK,GAETH,KAAKY,KAAK,QAAST,IAKvB,IAAIF,EAAOD,KAEXA,KAAKR,QAAQsC,OAAO6D,MAAM3F,KAAKqC,cAAc,SAASmD,GAChDzD,OAAO+B,QAAQC,UACO,mBAAbjE,EACTA,EAASiC,OAAO+B,QAAQC,UAAWyB,GAEnCvF,EAAKW,KAAK,QAASmB,OAAO+B,QAAQC,WAGpCjE,EAAS,KAAM0F,OAKrB5F,EAAWU,UAAUsF,MAAQ,SAAU9F,GAErC,GAAIE,KAAKqC,aAAe,EAAxB,CACErC,KAAKuC,QAAS,EACd,IAAIpC,EAAM,IAAIc,MAAM,wBACI,mBAAbnB,EACTA,EAASK,GAETH,KAAKY,KAAK,QAAST,OAKC,mBAAbL,GACTA,KAKJF,EAAWU,UAAUuF,MAAQ,SAAU/F,GAErC,GAAIE,KAAKqC,aAAe,EAAxB,CACErC,KAAKuC,QAAS,EACd,IAAIpC,EAAM,IAAIc,MAAM,wBACI,mBAAbnB,EACTA,EAASK,GAETH,KAAKY,KAAK,QAAST,QAKvBH,KAAKR,QAAQsC,OAAOgE,UAAU9F,KAAKqC,cAAc,EAAMvC,IAIzDF,EAAWU,UAAUyF,OAAS,SAAUjG,GAEtC,GAAIE,KAAKqC,aAAe,EAAxB,CACErC,KAAKuC,QAAS,EACd,IAAIpC,EAAM,IAAIc,MAAM,wBACI,mBAAbnB,EACTA,EAASK,GAETH,KAAKY,KAAK,QAAST,QAKvBH,KAAKR,QAAQsC,OAAOgE,UAAU9F,KAAKqC,cAAc,EAAOvC,IAI1DF,EAAWU,UAAU0F,OAAS,SAAUxG,EAAU,GAAIM,EAAW,UAE/D,GAAIE,KAAKqC,aAAe,EAAxB,CACErC,KAAKuC,QAAS,EACd,IAAIpC,EAAM,IAAIc,MAAM,wBACI,mBAAbnB,EACTA,EAASK,GAETH,KAAKY,KAAK,QAAST,QAKvBH,KAAKR,QAAQsC,OAAOkE,OAAOhG,KAAKqC,aAAc,CAACiB,QAAS9D,EAAQqB,UAAWf,IAI7EF,EAAWU,UAAUqD,MAAQ,WAC3B,IAAI1D,EAAOD,KACPiG,EAAY,GAGhB,IAAK,IAAI9C,EAAI,EAAGA,EAAI3C,UAAU4C,OAAQD,IACpC8C,EAAU9C,GAAK3C,UAAU2C,GAG3B,IAAI+C,EAAeD,EAAUE,OAAO,EAAG,GAAG,GAE1C,OAAO,WACL,IAAIC,EAAW,GACf,IAAK,IAAIjD,EAAI,EAAGA,EAAI3C,UAAU4C,OAAQD,IACpCiD,EAASjD,GAAK3C,UAAU2C,GAE1B,IAAIkD,EAAUJ,EAAUK,OAAOF,GAE/BnG,EAAKiG,GAAcK,MAAMtG,EAAMoG,KAKnCzG,EAAWU,UAAUkG,IAAM,SAAUhH,EAASM,GAC5CE,KAAKR,QAAQsC,OAAO2E,kBAAkBzG,KAAKqC,aAAc7C,GAAS,SAASgG,GACzE1F,EAASiC,OAAO+B,QAAQC,UAAWyB,OAIvC5F,EAAWU,UAAUoG,IAAM,SAAUlH,EAASM,GAC5CE,KAAKR,QAAQsC,OAAO6E,kBAAkB3G,KAAKqC,cAAc,SAASuE,GAChE9G,EAASiC,OAAO+B,QAAQC,UAAW6C,OAIvChH,EAAWiH,KAAOC,eAAehH,GAE/B,GAAqB,oBAAViC,QAAyBA,OAAOD,OAEzC,OAAO,IAAIiF,QAAQC,IAEjBjF,OAAOD,OAAOmF,YAAW,SAASC,GAEhC,IAAIC,EAAc,IAAI9G,MAAM6G,EAAM9D,QAElC,IAAK,IAAID,EAAI,EAAGA,EAAI+D,EAAM9D,OAAQD,IAChCgE,EAAYhE,GAAK,CACfiE,QAASF,EAAM/D,GAAGtD,KAClBA,KAAMqH,EAAM/D,GAAGtD,KACfwH,aAAcH,EAAM/D,GAAGmE,YACvBC,aAAc,GACdC,MAAO,GACPC,WAAW,GACXC,SAAU,MAAQR,EAAM/D,GAAGuE,UAAU,GAAGC,SAAS,IACjDC,UAAW,MAAQV,EAAM/D,GAAGyE,WAAW,GAAGD,SAAS,KAI/B,mBAAb7H,GAAyBA,EAASiC,OAAO+B,QAAQC,UAAWoD,GACvEH,EAAQG,QAMP,CACL,IAAIhF,EAAQ,IAAIlB,MAAM,mEAEtB,OADAnB,EAASqC,EAAO,MACT4E,QAAQc,OAAO1F,KA4B1B2F,OAAOC,QAAU,CACfnI,WAAYA,EACZiH,KAAMjH,EAAWiH,KACjBnE,mBAAoBA,EACpBsF,KAAM"}