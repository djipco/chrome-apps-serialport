{"version":3,"file":"chrome-apps-serialport.min.js","sources":["../src/chrome-apps-serialport.js"],"sourcesContent":["\"use strict\";\n\nconst EE = require(\"events\").EventEmitter;\nconst util = require(\"util\");\n\nif (process && process.versions.nw && parseFloat(process.versions.nw) >= 0.13) {\n  require(\"nwjs-j5-fix\").fix(); // Fix issue with streams in NW.js\n}\n\nconst DATABITS = [7, 8];\nconst STOPBITS = [1, 2];\nconst PARITY = [\"none\", \"even\", \"mark\", \"odd\", \"space\"];\nconst FLOWCONTROLS = [\"RTSCTS\"];\n\nconst _options = {\n  baudrate: 9600,\n  parity: \"none\",\n  rtscts: false,\n  databits: 8,\n  stopbits: 1,\n  buffersize: 256\n};\n\nfunction convertOptions(options){\n  switch (options.dataBits) {\n    case 7:\n      options.dataBits = \"seven\";\n      break;\n    case 8:\n      options.dataBits = \"eight\";\n      break;\n  }\n\n  switch (options.stopBits) {\n    case 1:\n      options.stopBits = \"one\";\n      break;\n    case 2:\n      options.stopBits = \"two\";\n      break;\n  }\n\n  switch (options.parity) {\n    case \"none\":\n      options.parity = \"no\";\n      break;\n  }\n\n  return options;\n}\n\nfunction SerialPort(path, options, callback) {\n\n  EE.call(this);\n\n  let self = this;\n\n  let args = Array.prototype.slice.call(arguments);\n  callback = args.pop();\n  if (typeof(callback) !== \"function\") {\n    callback = null;\n  }\n\n  options = (typeof options !== \"function\") && options || {};\n\n  if (options.autoOpen === undefined || options.autoOpen === null) {\n    options.autoOpen = true;\n  }\n\n  callback = callback || function (err) {\n    if (err) {\n      self.emit(\"error\", err);\n    }\n  };\n\n  let err;\n\n  options.baudRate = options.baudRate || options.baudrate || _options.baudrate;\n\n  options.dataBits = options.dataBits || options.databits || _options.databits;\n  if (DATABITS.indexOf(options.dataBits) === -1) {\n    err = new Error(\"Invalid \\\"databits\\\": \" + options.dataBits);\n    callback(err);\n    return;\n  }\n\n  options.stopBits = options.stopBits || options.stopbits || _options.stopbits;\n  if (STOPBITS.indexOf(options.stopBits) === -1) {\n    err = new Error(\"Invalid \\\"stopbits\\\": \" + options.stopbits);\n    callback(err);\n    return;\n  }\n\n  options.parity = options.parity || _options.parity;\n  if (PARITY.indexOf(options.parity) === -1) {\n    err = new Error(\"Invalid \\\"parity\\\": \" + options.parity);\n    callback(err);\n    return;\n  }\n\n  if (!path) {\n    err = new Error(\"Invalid port specified: \" + path);\n    callback(err);\n    return;\n  }\n\n  options.rtscts = _options.rtscts;\n\n  if (options.flowControl || options.flowcontrol) {\n    let fc = options.flowControl || options.flowcontrol;\n\n    if (typeof fc === \"boolean\") {\n      options.rtscts = true;\n    } else {\n      let clean = fc.every(function (flowControl) {\n        let fcup = flowControl.toUpperCase();\n        let idx = FLOWCONTROLS.indexOf(fcup);\n        if (idx < 0) {\n          let err = new Error(\"Invalid \\\"flowControl\\\": \" + fcup + \". Valid options: \" +\n            FLOWCONTROLS.join(\"\", \"\"));\n          callback(err);\n          return false;\n        } else {\n\n          // \"XON\", \"XOFF\", \"XANY\", \"DTRDTS\", \"RTSCTS\"\n          switch (idx) {\n            case 0: options.rtscts = true; break;\n          }\n          return true;\n        }\n      });\n      if(!clean){\n        return;\n      }\n    }\n  }\n\n  options.bufferSize = options.bufferSize || options.buffersize || _options.buffersize;\n\n  // defaults to chrome.serial if no options.serial passed\n  // inlined instead of on _options to allow mocking global chrome.serial for optional options test\n  options.serial = options.serial || (typeof chrome !== \"undefined\" && chrome.serial);\n\n  if (!options.serial) {\n    throw new Error(\"No access to serial ports. Try loading as a Chrome Application.\");\n  }\n\n  this.options = convertOptions(options);\n\n  this.options.serial.onReceiveError.addListener(function(info){\n\n    switch (info.error) {\n\n      case \"disconnected\":\n      case \"device_lost\":\n      case \"system_error\":\n        err = new Error(\"Disconnected\");\n        // send notification of disconnect\n        if (self.options.disconnectedCallback) {\n          self.options.disconnectedCallback(err);\n        } else {\n          self.emit(\"disconnect\", err);\n        }\n        if(self.connectionId >= 0){\n          self.close();\n        }\n        break;\n      case \"timeout\":\n        break;\n    }\n\n  });\n\n  this.path = path;\n  this.isOpen = false;\n  this.baudRate = this.options.baudRate;\n\n  if (options.autoOpen) {\n    process.nextTick(function () {\n      self.open(callback);\n    });\n  }\n\n}\n\nutil.inherits(SerialPort, EE);\n\nSerialPort.prototype.connectionId = -1;\n\nSerialPort.prototype.open = function (callback) {\n\n  let options = {\n    bitrate: parseInt(this.options.baudRate, 10),\n    dataBits: this.options.dataBits,\n    parityBit: this.options.parity,\n    stopBits: this.options.stopBits,\n    ctsFlowControl: this.options.rtscts\n  };\n\n  this.options.serial.connect(this.path, options, this.proxy(\"onOpen\", callback));\n\n};\n\nSerialPort.prototype.onOpen = function (callback, openInfo) {\n  if(chrome.runtime.lastError){\n    if(typeof callback === \"function\"){\n      callback(chrome.runtime.lastError);\n    }else{\n      this.emit(\"error\", chrome.runtime.lastError);\n    }\n    return;\n  }\n\n  this.connectionId = openInfo.connectionId;\n\n  if (this.connectionId === -1) {\n    this.emit(\"error\", new Error(\"Could not open port.\"));\n    return;\n  }\n\n  this.isOpen = true;\n  this.emit(\"open\", openInfo);\n\n  this._reader = this.proxy(\"onRead\");\n\n  this.options.serial.onReceive.addListener(this._reader);\n\n  if(typeof callback === \"function\"){\n    callback(chrome.runtime.lastError, openInfo);\n  }\n};\n\nSerialPort.prototype.onRead = function (readInfo) {\n  if (readInfo && this.connectionId === readInfo.connectionId) {\n\n    if (this.options.dataCallback) {\n      this.options.dataCallback(toBuffer(readInfo.data));\n    } else {\n      this.emit(\"data\", toBuffer(readInfo.data));\n    }\n\n  }\n};\n\nSerialPort.prototype.write = function (buffer, encoding = \"utf8\", callback = () => {}) {\n  if (this.connectionId < 0) {\n    let err = new Error(\"Serialport not open.\");\n    this.isOpen = false;\n    if(typeof callback === \"function\"){\n      callback(err);\n    }else{\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  if (typeof buffer === \"string\") {\n    buffer = str2ab(buffer);\n  }\n\n  if (encoding !== \"utf8\") console.warn(\"Only utf8 encoding is supported for strings.\");\n\n  //Make sure its not a browserify faux Buffer.\n  if (!(buffer instanceof ArrayBuffer)) {\n    buffer = buffer2ArrayBuffer(buffer);\n  }\n\n  this.options.serial.send(this.connectionId, buffer, function(info) {\n    if (typeof callback === \"function\") {\n      callback(chrome.runtime.lastError, info);\n    }\n  });\n};\n\n\nSerialPort.prototype.close = function (callback) {\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if(typeof callback === \"function\"){\n      callback(err);\n    }else{\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  this.options.serial.disconnect(this.connectionId, this.proxy(\"onClose\", callback));\n};\n\nSerialPort.prototype.onClose = function (callback, result) {\n  this.connectionId = -1;\n  this.isOpen = false;\n  this.emit(\"close\");\n\n  this.removeAllListeners();\n  if(this._reader){\n    this.options.serial.onReceive.removeListener(this._reader);\n    this._reader = null;\n  }\n\n  if (typeof callback === \"function\") {\n    callback(chrome.runtime.lastError, result);\n  }\n};\n\nSerialPort.prototype.flush = function (callback) {\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if(typeof callback === \"function\"){\n      callback(err);\n    }else{\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  let self = this;\n\n  this.options.serial.flush(this.connectionId, function(result) {\n    if (chrome.runtime.lastError) {\n      if (typeof callback === \"function\") {\n        callback(chrome.runtime.lastError, result);\n      } else {\n        self.emit(\"error\", chrome.runtime.lastError);\n      }\n    } else {\n      callback(null, result);\n    }\n  });\n};\n\nSerialPort.prototype.drain = function (callback) {\n\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if (typeof callback === \"function\") {\n      callback(err);\n    } else {\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  if (typeof callback === \"function\") {\n    callback();\n  }\n\n};\n\nSerialPort.prototype.pause = function (callback) {\n\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if (typeof callback === \"function\") {\n      callback(err);\n    } else {\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  this.options.serial.setPaused(this.connectionId, true, callback);\n\n};\n\nSerialPort.prototype.resume = function (callback) {\n\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if (typeof callback === \"function\") {\n      callback(err);\n    } else {\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  this.options.serial.setPaused(this.connectionId, false, callback);\n\n};\n\nSerialPort.prototype.update = function (options = {}, callback = () => {}) {\n\n  if (this.connectionId < 0) {\n    this.isOpen = false;\n    let err = new Error(\"Serialport not open.\");\n    if (typeof callback === \"function\") {\n      callback(err);\n    } else {\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  this.options.serial.update(this.connectionId, {bitrate: options.baudRate}, callback);\n\n};\n\n\nSerialPort.prototype.proxy = function () {\n  let self = this;\n  let proxyArgs = [];\n\n  //arguments isnt actually an array.\n  for (let i = 0; i < arguments.length; i++) {\n    proxyArgs[i] = arguments[i];\n  }\n\n  let functionName = proxyArgs.splice(0, 1)[0];\n\n  return function() {\n    let funcArgs = [];\n    for (let i = 0; i < arguments.length; i++) {\n      funcArgs[i] = arguments[i];\n    }\n    let allArgs = proxyArgs.concat(funcArgs);\n\n    self[functionName].apply(self, allArgs);\n  };\n\n};\n\nSerialPort.prototype.set = function (options, callback) {\n  this.options.serial.setControlSignals(this.connectionId, options, function(result){\n    callback(chrome.runtime.lastError, result);\n  });\n};\n\nSerialPort.prototype.get = function (options, callback) {\n  this.options.serial.getControlSignals(this.connectionId, function(signals){\n    callback(chrome.runtime.lastError, signals);\n  });\n};\n\nSerialPort.list = async function(callback) {\n\n  if (typeof chrome != \"undefined\" && chrome.serial) {\n\n    return new Promise(resolve => {\n\n      chrome.serial.getDevices(function(ports) {\n\n        let portObjects = new Array(ports.length);\n\n        for (let i = 0; i < ports.length; i++) {\n          portObjects[i] = {\n            comName: ports[i].path, // backwards-compatibility with older versions of serialport\n            path: ports[i].path,\n            manufacturer: ports[i].displayName,\n            serialNumber: \"\",\n            pnpId: \"\",\n            locationId:\"\",\n            vendorId: \"0x\" + (ports[i].vendorId||0).toString(16),\n            productId: \"0x\" + (ports[i].productId||0).toString(16)\n          };\n        }\n\n        if (typeof callback === \"function\") callback(chrome.runtime.lastError, portObjects);\n        resolve(portObjects);\n\n      });\n\n    });\n\n  } else {\n    let error = new Error(\"No access to serial ports. Try loading as a Chrome Application.\");\n    callback(error, null);\n    return Promise.reject(error);\n  }\n\n};\n\n// Convert string to ArrayBuffer\nfunction str2ab(str) {\n  let buf = new ArrayBuffer(str.length);\n  let bufView = new Uint8Array(buf);\n  for (let i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\n// Convert buffer to ArrayBuffer\nfunction buffer2ArrayBuffer(buffer) {\n  let buf = new ArrayBuffer(buffer.length);\n  let bufView = new Uint8Array(buf);\n  for (let i = 0; i < buffer.length; i++) {\n    bufView[i] = buffer[i];\n  }\n  return buf;\n}\n\nfunction toBuffer(ab) {\n  let buffer = new Buffer(ab.byteLength);\n  let view = new Uint8Array(ab);\n  for (let i = 0; i < buffer.length; ++i) {\n    buffer[i] = view[i];\n  }\n  return buffer;\n}\n\nmodule.exports = {\n  SerialPort: SerialPort,\n  list: SerialPort.list, // this is for backwards-compatibility\n  buffer2ArrayBuffer: buffer2ArrayBuffer,\n  used: [] //Populate this somewhere!!\n};\n"],"names":["EE","require","EventEmitter","util","process","versions","nw","parseFloat","fix","DATABITS","STOPBITS","PARITY","FLOWCONTROLS","_options","convertOptions","options","dataBits","stopBits","parity","SerialPort","path","callback","call","this","err","self","args","Array","prototype","slice","arguments","pop","undefined","autoOpen","emit","baudRate","baudrate","databits","indexOf","Error","stopbits","rtscts","flowControl","flowcontrol","fc","every","fcup","toUpperCase","idx","join","bufferSize","buffersize","serial","chrome","onReceiveError","addListener","info","error","disconnectedCallback","connectionId","close","isOpen","nextTick","open","buffer2ArrayBuffer","buffer","buf","ArrayBuffer","length","bufView","Uint8Array","i","toBuffer","ab","Buffer","byteLength","view","inherits","bitrate","parseInt","parityBit","ctsFlowControl","connect","proxy","onOpen","openInfo","runtime","lastError","_reader","onReceive","onRead","readInfo","dataCallback","data","write","encoding","str","charCodeAt","str2ab","console","warn","send","disconnect","onClose","result","removeAllListeners","removeListener","flush","drain","pause","setPaused","resume","update","proxyArgs","functionName","splice","funcArgs","allArgs","concat","apply","set","setControlSignals","get","getControlSignals","signals","list","async","Promise","resolve","getDevices","ports","portObjects","comName","manufacturer","displayName","serialNumber","pnpId","locationId","vendorId","toString","productId","reject","module","exports","used"],"mappings":"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"}