{"version":3,"file":"chrome-apps-serialport.min.js","sources":["../src/chrome-apps-serialport.js"],"sourcesContent":["\"use strict\";\n\nconst EE = require(\"events\").EventEmitter;\nconst util = require(\"util\");\nrequire(\"nwjs-j5-fix\").fix(); // Fix issue with streams in NW.js\n\nvar DATABITS = [7, 8];\nvar STOPBITS = [1, 2];\nvar PARITY = [\"none\", \"even\", \"mark\", \"odd\", \"space\"];\nvar FLOWCONTROLS = [\"RTSCTS\"];\n\nvar _options = {\n  baudrate: 9600,\n  parity: \"none\",\n  rtscts: false,\n  databits: 8,\n  stopbits: 1,\n  buffersize: 256\n};\n\nfunction convertOptions(options){\n  switch (options.dataBits) {\n    case 7:\n      options.dataBits = \"seven\";\n      break;\n    case 8:\n      options.dataBits = \"eight\";\n      break;\n  }\n\n  switch (options.stopBits) {\n    case 1:\n      options.stopBits = \"one\";\n      break;\n    case 2:\n      options.stopBits = \"two\";\n      break;\n  }\n\n  switch (options.parity) {\n    case \"none\":\n      options.parity = \"no\";\n      break;\n  }\n\n  return options;\n}\n\nfunction SerialPort(path, options, openImmediately, callback) {\n\n  EE.call(this);\n\n  var self = this;\n\n  var args = Array.prototype.slice.call(arguments);\n  callback = args.pop();\n  if (typeof(callback) !== \"function\") {\n    callback = null;\n  }\n\n  options = (typeof options !== \"function\") && options || {};\n\n  if (openImmediately === undefined || openImmediately === null) {\n    openImmediately = true;\n  }\n\n  callback = callback || function (err) {\n    if (err) {\n      self.emit(\"error\", err);\n    }\n  };\n\n  var err;\n\n  options.baudRate = options.baudRate || options.baudrate || _options.baudrate;\n\n  options.dataBits = options.dataBits || options.databits || _options.databits;\n  if (DATABITS.indexOf(options.dataBits) === -1) {\n    err = new Error(\"Invalid \\\"databits\\\": \" + options.dataBits);\n    callback(err);\n    return;\n  }\n\n  options.stopBits = options.stopBits || options.stopbits || _options.stopbits;\n  if (STOPBITS.indexOf(options.stopBits) === -1) {\n    err = new Error(\"Invalid \\\"stopbits\\\": \" + options.stopbits);\n    callback(err);\n    return;\n  }\n\n  options.parity = options.parity || _options.parity;\n  if (PARITY.indexOf(options.parity) === -1) {\n    err = new Error(\"Invalid \\\"parity\\\": \" + options.parity);\n    callback(err);\n    return;\n  }\n\n  if (!path) {\n    err = new Error(\"Invalid port specified: \" + path);\n    callback(err);\n    return;\n  }\n\n  options.rtscts = _options.rtscts;\n\n  if (options.flowControl || options.flowcontrol) {\n    var fc = options.flowControl || options.flowcontrol;\n\n    if (typeof fc === \"boolean\") {\n      options.rtscts = true;\n    } else {\n      var clean = fc.every(function (flowControl) {\n        var fcup = flowControl.toUpperCase();\n        var idx = FLOWCONTROLS.indexOf(fcup);\n        if (idx < 0) {\n          var err = new Error(\"Invalid \\\"flowControl\\\": \" + fcup + \". Valid options: \" +\n            FLOWCONTROLS.join(\"\", \"\"));\n          callback(err);\n          return false;\n        } else {\n\n          // \"XON\", \"XOFF\", \"XANY\", \"DTRDTS\", \"RTSCTS\"\n          switch (idx) {\n            case 0: options.rtscts = true; break;\n          }\n          return true;\n        }\n      });\n      if(!clean){\n        return;\n      }\n    }\n  }\n\n  options.bufferSize = options.bufferSize || options.buffersize || _options.buffersize;\n\n  // defaults to chrome.serial if no options.serial passed\n  // inlined instead of on _options to allow mocking global chrome.serial for optional options test\n  options.serial = options.serial || (typeof chrome !== \"undefined\" && chrome.serial);\n\n  if (!options.serial) {\n    throw new Error(\"No access to serial ports. Try loading as a Chrome Application.\");\n  }\n\n  this.options = convertOptions(options);\n\n  this.options.serial.onReceiveError.addListener(function(info){\n\n    switch (info.error) {\n\n      case \"disconnected\":\n      case \"device_lost\":\n      case \"system_error\":\n        err = new Error(\"Disconnected\");\n        // send notification of disconnect\n        if (self.options.disconnectedCallback) {\n          self.options.disconnectedCallback(err);\n        } else {\n          self.emit(\"disconnect\", err);\n        }\n        if(self.connectionId >= 0){\n          self.close();\n        }\n        break;\n      case \"timeout\":\n        break;\n    }\n\n  });\n\n  this.path = path;\n\n  if (openImmediately) {\n    process.nextTick(function () {\n      self.open(callback);\n    });\n  }\n}\n\nutil.inherits(SerialPort, EE);\n\nSerialPort.prototype.connectionId = -1;\n\nSerialPort.prototype.open = function (callback) {\n  var options = {\n    bitrate: parseInt(this.options.baudRate, 10),\n    dataBits: this.options.dataBits,\n    parityBit: this.options.parity,\n    stopBits: this.options.stopBits,\n    ctsFlowControl: this.options.rtscts\n  };\n\n  this.options.serial.connect(this.path, options, this.proxy(\"onOpen\", callback));\n};\n\nSerialPort.prototype.onOpen = function (callback, openInfo) {\n  if(chrome.runtime.lastError){\n    if(typeof callback === \"function\"){\n      callback(chrome.runtime.lastError);\n    }else{\n      this.emit(\"error\", chrome.runtime.lastError);\n    }\n    return;\n  }\n\n  this.connectionId = openInfo.connectionId;\n\n  if (this.connectionId === -1) {\n    this.emit(\"error\", new Error(\"Could not open port.\"));\n    return;\n  }\n\n  this.emit(\"open\", openInfo);\n\n  this._reader = this.proxy(\"onRead\");\n\n  this.options.serial.onReceive.addListener(this._reader);\n\n  if(typeof callback === \"function\"){\n    callback(chrome.runtime.lastError, openInfo);\n  }\n};\n\nSerialPort.prototype.onRead = function (readInfo) {\n  if (readInfo && this.connectionId === readInfo.connectionId) {\n\n    if (this.options.dataCallback) {\n      this.options.dataCallback(toBuffer(readInfo.data));\n    } else {\n      this.emit(\"data\", toBuffer(readInfo.data));\n    }\n\n  }\n};\n\nSerialPort.prototype.write = function (buffer, callback) {\n  if (this.connectionId < 0) {\n    var err = new Error(\"Serialport not open.\");\n    if(typeof callback === \"function\"){\n      callback(err);\n    }else{\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  if (typeof buffer === \"string\") {\n    buffer = str2ab(buffer);\n  }\n\n  //Make sure its not a browserify faux Buffer.\n  if (buffer instanceof ArrayBuffer === false) {\n    buffer = buffer2ArrayBuffer(buffer);\n  }\n\n  this.options.serial.send(this.connectionId, buffer, function(info) {\n    if (typeof callback === \"function\") {\n      callback(chrome.runtime.lastError, info);\n    }\n  });\n};\n\n\nSerialPort.prototype.close = function (callback) {\n  if (this.connectionId < 0) {\n    var err = new Error(\"Serialport not open.\");\n    if(typeof callback === \"function\"){\n      callback(err);\n    }else{\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  this.options.serial.disconnect(this.connectionId, this.proxy(\"onClose\", callback));\n};\n\nSerialPort.prototype.onClose = function (callback, result) {\n  this.connectionId = -1;\n  this.emit(\"close\");\n\n  this.removeAllListeners();\n  if(this._reader){\n    this.options.serial.onReceive.removeListener(this._reader);\n    this._reader = null;\n  }\n\n  if (typeof callback === \"function\") {\n    callback(chrome.runtime.lastError, result);\n  }\n};\n\nSerialPort.prototype.flush = function (callback) {\n  if (this.connectionId < 0) {\n    var err = new Error(\"Serialport not open.\");\n    if(typeof callback === \"function\"){\n      callback(err);\n    }else{\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  var self = this;\n\n  this.options.serial.flush(this.connectionId, function(result) {\n    if (chrome.runtime.lastError) {\n      if (typeof callback === \"function\") {\n        callback(chrome.runtime.lastError, result);\n      } else {\n        self.emit(\"error\", chrome.runtime.lastError);\n      }\n      return;\n    } else {\n      callback(null, result);\n    }\n  });\n};\n\nSerialPort.prototype.drain = function (callback) {\n  if (this.connectionId < 0) {\n    var err = new Error(\"Serialport not open.\");\n    if(typeof callback === \"function\"){\n      callback(err);\n    }else{\n      this.emit(\"error\", err);\n    }\n    return;\n  }\n\n  if (typeof callback === \"function\") {\n    callback();\n  }\n};\n\n\nSerialPort.prototype.proxy = function () {\n  var self = this;\n  var proxyArgs = [];\n\n  //arguments isnt actually an array.\n  for (var i = 0; i < arguments.length; i++) {\n    proxyArgs[i] = arguments[i];\n  }\n\n  var functionName = proxyArgs.splice(0, 1)[0];\n\n  var func = function() {\n    var funcArgs = [];\n    for (var i = 0; i < arguments.length; i++) {\n      funcArgs[i] = arguments[i];\n    }\n    var allArgs = proxyArgs.concat(funcArgs);\n\n    self[functionName].apply(self, allArgs);\n  };\n\n  return func;\n};\n\nSerialPort.prototype.set = function (options, callback) {\n  this.options.serial.setControlSignals(this.connectionId, options, function(result){\n    callback(chrome.runtime.lastError, result);\n  });\n};\n\nSerialPort.prototype.isOpen = function () {\n  return this.connectionId > -1;\n};\n\nfunction SerialPortList(callback) {\n\n  if (typeof chrome != \"undefined\" && chrome.serial) {\n\n    return new Promise(resolve => {\n\n      chrome.serial.getDevices(function(ports) {\n\n        var portObjects = new Array(ports.length);\n\n        for (var i = 0; i < ports.length; i++) {\n          portObjects[i] = {\n            comName: ports[i].path, // backwards-compatibility with older versions of serialport\n            path: ports[i].path,\n            manufacturer: ports[i].displayName,\n            serialNumber: \"\",\n            pnpId: \"\",\n            locationId:\"\",\n            vendorId: \"0x\" + (ports[i].vendorId||0).toString(16),\n            productId: \"0x\" + (ports[i].productId||0).toString(16)\n          };\n        }\n\n        if (typeof callback === \"function\") callback(chrome.runtime.lastError, portObjects);\n        resolve(portObjects);\n\n      });\n\n    });\n\n  } else {\n    var error = new Error(\"No access to serial ports. Try loading as a Chrome Application.\");\n    callback(error, null);\n    return Promise.reject(error);\n  }\n\n\n}\n\n// Convert string to ArrayBuffer\nfunction str2ab(str) {\n  var buf = new ArrayBuffer(str.length);\n  var bufView = new Uint8Array(buf);\n  for (var i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\n// Convert buffer to ArrayBuffer\nfunction buffer2ArrayBuffer(buffer) {\n  var buf = new ArrayBuffer(buffer.length);\n  var bufView = new Uint8Array(buf);\n  for (var i = 0; i < buffer.length; i++) {\n    bufView[i] = buffer[i];\n  }\n  return buf;\n}\n\nfunction toBuffer(ab) {\n  var buffer = new Buffer(ab.byteLength);\n  var view = new Uint8Array(ab);\n  for (var i = 0; i < buffer.length; ++i) {\n    buffer[i] = view[i];\n  }\n  return buffer;\n}\n\nmodule.exports = {\n  SerialPort: SerialPort,\n  list: SerialPortList,\n  buffer2ArrayBuffer: buffer2ArrayBuffer,\n  used: [] //TODO: Populate this somewhere.\n};\n"],"names":["EE","require","EventEmitter","util","fix","DATABITS","STOPBITS","PARITY","FLOWCONTROLS","_options","convertOptions","options","dataBits","stopBits","parity","SerialPort","path","openImmediately","callback","call","this","err","self","args","Array","prototype","slice","arguments","pop","emit","baudRate","baudrate","databits","indexOf","Error","stopbits","rtscts","flowControl","flowcontrol","fc","clean","every","fcup","toUpperCase","idx","join","bufferSize","buffersize","serial","chrome","onReceiveError","addListener","info","error","disconnectedCallback","connectionId","close","process","nextTick","open","buffer2ArrayBuffer","buffer","buf","ArrayBuffer","length","bufView","Uint8Array","i","toBuffer","ab","Buffer","byteLength","view","inherits","bitrate","parseInt","parityBit","ctsFlowControl","connect","proxy","onOpen","openInfo","runtime","lastError","_reader","onReceive","onRead","readInfo","dataCallback","data","write","str","charCodeAt","str2ab","send","disconnect","onClose","result","removeAllListeners","removeListener","flush","drain","proxyArgs","functionName","splice","func","funcArgs","allArgs","concat","apply","set","setControlSignals","isOpen","module","exports","list","Promise","resolve","getDevices","ports","portObjects","comName","manufacturer","displayName","serialNumber","pnpId","locationId","vendorId","toString","productId","reject","used"],"mappings":"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"}